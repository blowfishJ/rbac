<?php
/**
 * 用户管理
 * @author mybsdc <mybsdc@gmail.com>
 * @date 2017/7/27
 * @time 7:43
 */

namespace app\home\controller;

use think\Request;
use think\Db;
use think\Validate; // 用于验证
use app\home\controller\common\Base;

class User extends Base
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->role = model('Role');
        $this->user = model('User');
        $this->user_role = model('UserRole');
    }

    // 有效用户列表
    public function index()
    {
        $data = $this->user->getAllUser();
        $this->assign('data', $data);
        return $this->fetch();
    }

    /**
     * 添加或编辑用户
     * @param int $id 编辑id
     * @return mixed
     */
    public function setUser()
    {
        if (Request::instance()->isGet()) { // get请求展示页面
            $id = input('get.id', 0);
            $info = [];
            if ($id) {
                $info = $this->user->getUserInfo($id);
            }

            // 取出所有角色
            $roleInfo = $this->role->getAllRole();

            // 取出某用户所有所属角色id
            $userRoleList = array_column($this->user_role->getUserRoleList($id), 'role_id');

            $this->assign('userRoleList', $userRoleList);
            $this->assign('roleInfo', $roleInfo);
            $this->assign('info', $info);
            return $this->fetch('user/setUser');
        } else if (Request::instance()->isPost()) { // post请求处理添加或编辑
            $data = input('post.');
            $data['name'] = trim($data['name']);
            $data['email'] = trim($data['email']);
            $data['pwd'] = trim($data['pwd']);
            $data['pwd2'] = trim($data['pwd2']);
            $id = input('post.id', 0);
            $roleIdArray = isset($data['roleIdArray']) ? $data['roleIdArray'] : []; // 提交过来的角色id

            // 验证规则 - tp默认若无值则不验证，故尽量都设置必填
            $rule = [
                ['name', 'require|min:2|max:8', '请输入用户名|用户名的最小长度为2个字符|用户名不能超过8个字符'],
                ['pwd', 'require|min:6|max:16|confirm:pwd2', '必须设置密码哦|密码不能少于6个字符|密码不能超过16个字符|两次输入的密码不一致'],
                ['email', 'require|email', '必须输入邮箱地址哦|请输入一个正确的邮箱地址'],
            ];
            $validate = new Validate($rule);
            if (!$validate->check($data)) { // 开始验证
                return json(['code' => -1, 'tips' => $validate->getError()]);
            }

            /*if (!$data['name']) {
                return json(['code' => -1, 'tips' => '请输入用户名']);
            }

            if (mb_strlen($data['name'], 'utf-8') < 2 || mb_strlen($data['name'], 'utf-8') > 8) {
                return json(['code' => -1, 'tips' => '用户名长度不合法，请输入2至8位字符']);
            }*/

            // 判断用户名是否已存在
            $userInfo = Db::name('user')->where(['name' => $data['name']])->where('id', '<>', $id)->find(); // 加id<>$id条件为排除本身
            if ($userInfo) {
                return json(['code' => -1, 'tips' => '该用户名已存在，请输入一个新用户名']);
            }

            // 邮箱是否已存在
            $haveEmail = Db::name('user')->where(['email' => $data['email']])->where('id', '<>', $id)->count(); // 统计数量的查询速度更快
            if ($haveEmail) {
                return json(['code' => -1, 'tips' => '该邮箱已被注册']);
            }

            // 设置用户基础信息
            $data['pwd'] = md5($data['pwd']);
            if ($id) { // 编辑操作 - 前台查询的结果有值才会提交id过来，故此处可以省略一次查询
                $data['update_time'] = time();
                $result = $this->user->updateUserInfo($data);
            } else { // 添加操作
                $data['create_time'] = time();
                $result = $this->user->addUserInfo($data); // 返回自增id或false
                $id = $result;
            }

            // 设置用户角色对应关系以及返回结果
            if ($result) {
                /**
                 * 需要删除的角色对应关系
                 * 逻辑：查询某人已有角色数据 => 与提交过来的角色数组对比 => 删除已有角色数据中有而提交过来的数据中没有的数据
                 */
                $userRoleList = array_column($this->user_role->getUserRoleList($id), 'role_id'); // 已有角色
                if ($userRoleList) {
                    $needDelete = array_diff($userRoleList, $roleIdArray); // 仅存在于已有角色数据中的角色id集
                    if ($needDelete) {
                        foreach ($needDelete as $v) {
                            $this->user_role->deleteUserRole($id, $v);
                        }
                    }
                }

                /**
                 * 需要添加的角色对应关系
                 * 逻辑：同上，正好相反
                 */
                if ($roleIdArray) {
                    $needAdd = array_diff($roleIdArray, $userRoleList); // 仅存在于提交过来的角色id集中
                    if ($needAdd) {
                        $this->user_role->setUserRole($id, $needAdd); // 添加用户角色对应关系
                    }
                }

                $tipsArray = ['哈哈', '恭喜', '真厉害', '哟西', '没错', '啦啦啦', '可以的', '小伙子'];
                $tip = $tipsArray[mt_rand(0, count($tipsArray) - 1)];
                return json(['code' => 200, 'tips' => $tip . '，操作成功']);
            } else {
                return json(['code' => -1, 'tips' => '哎呀，出错了，过一会再试试吧']);
            }
        } else {
            return $this->error('非法操作！');
        }
    }
}