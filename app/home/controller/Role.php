<?php
/**
 * 角色控制
 * @author mybsdc <mybsdc@gmail.com>
 * @date 2017/7/24
 * @time 21:35
 */

namespace app\home\controller;

use think\Request;
use think\Db;
use app\home\controller\common\Base;

class Role extends Base
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->role = model('Role');
        $this->access = model('Access');
        $this->role_access = model('RoleAccess');
    }

    // 角色列表
    public function index()
    {
        $data = $this->role->roleList();
        $this->assign('data', $data);
        return $this->fetch();
    }

    /**
     * 添加或编辑角色
     * @param int $id 编辑id
     * @return mixed
     */
    public function setRole()
    {
        if (Request::instance()->isGet()) { // get请求展示页面
            $id = input('get.id', 0);
            $info = []; // 角色数据
            if ($id) {
                $info = $this->role->getRoleInfo($id);
            }
            $this->assign('info', $info);
            return $this->fetch('role/setRole');
        } else if (Request::instance()->isPost()) { // post请求处理添加或编辑
            $roleName = input('post.roleName');
            $id = input('post.id', 0);
            if (!$roleName) {
                return json(['code' => -1, 'tips' => '请输入角色名']);
            }

            // 判断角色名是否已存在
            $roleInfo = Db::name('role')->where(['name' => $roleName])->where('id', '<>', $id)->find(); // id<>$id其它数据中有无此角色名，主要排除编辑操作，当前用户名也许没改呢
            if ($roleInfo) {
                return json(['code' => -1, 'tips' => '该角色名已存在，请输入一个新角色名']);
            }

            $findInfo = $this->role->getRoleInfo($id);
            $data['name'] = $roleName; // 数据准备
            $data['update_time'] = time();
            if ($findInfo) { // 若存在这条数据，编辑操作
                $data['id'] = $findInfo['id'];
                $result = $this->role->updateRoleName($data);
            } else { // 添加操作
                $data['create_time'] = time();
                $result = $this->role->addRoleName($data);
            }

            if ($result) {
                $tipsArray = ['哈哈', '恭喜', '真厉害', '哟西', '没错', '啦啦啦', '可以的', '小伙子'];
                $tip = $tipsArray[mt_rand(0, count($tipsArray) - 1)];
                return json(['code' => 200, 'tips' => $tip . '，操作成功']);
            } else {
                return json(['code' => -1, 'tips' => '哎呀，出错了，过一会再试试吧']);
            }
        } else {
            return $this->error('非法操作！');
        }
    }

    // 设置角色和权限的关系
    public function setRoleAccess()
    {
        if (Request::instance()->isGet()) { // get请求展示页面
            $role_id = input('get.role_id', 0);
            if (!$role_id) {
                return $this->error('没找到角色id，正在回到角色列表页', 'home/role/index');
            }

            // 获取角色信息
            $info = $this->role->getRoleInfo($role_id);
            if (!$info) {
                return $this->error('没找到角色，正在回到角色列表页', 'home/role/index');
            }

            // 取出所有权限
            $accessList = $this->access->getAllAccess();

            // 取出已分配给某角色的权限id集
            $haveAccess = array_column ($this->role_access->getRoleAccess($role_id), 'access_id');

            $this->assign('haveAccess', $haveAccess);
            $this->assign('accessList', $accessList);
            $this->assign('info', $info);
            return $this->fetch('role/setRoleAccess');
        } else if (Request::instance()->isPost()) { // post请求处理角色的权限设置
            $role_id = input('post.id', 0); // 角色id
            $accessIdArray = Request::instance()->post('accessIdArray/a', []); // 选中权限id集合
//            p($accessIdArray);
//            $accessIdArray = input('post.accessIdArray/a', []); // 选中权限id集合

            // 判断角色是否存在
            $currentRole = $this->role->getRoleInfo($role_id);
            if (!$currentRole) {
                return json(['code' => -1, 'tips' => '该角色不存在']);
            }

            // 取出已分配给某角色的权限id集
            $haveAccess = array_column ($this->role_access->getRoleAccess($role_id), 'access_id');

            $deleteNum = 0;
            $addNum = 0;

            /**
             * 需要删除的权限
             * 逻辑：同用户角色设置页，不再赘述
             */
            if ($haveAccess) {
                $needDelete = array_diff($haveAccess, $accessIdArray); // 仅存在于已分配给当前角色的权限集合
                if ($needDelete) {
                    $deleteNum = $this->role_access->deleteRoleAccess($role_id, $needDelete);
                }
            }

            /**
             * 需要添加的权限
             * 逻辑：同上
             */
            $needAdd = array_diff($accessIdArray, $haveAccess); // 仅存在于提交过来的access_id集合中
            if ($needAdd) {
                $addNum = $this->role_access->addRoleAccess($role_id, $needAdd);
            }

            // 利用PHP短路特性，整点好玩的
            if ($deleteNum !== 0 && $addNum === 0) {
                $tips = '成功回收了<span class="redBigFonts">' . $currentRole['name'] . '</span>的<span class="redBigFonts">' . $deleteNum . '</span>个权限';
            } else if ($deleteNum === 0 && $addNum !== 0) {
                $tips = '成功为<span class="redBigFonts">' . $currentRole['name'] . '</span>添加了<span class="redBigFonts">' . $addNum . '</span>个权限';
            } else if ($deleteNum !== 0 && $addNum !== 0) {
                $tips = '成功为<span class="redBigFonts">' . $currentRole['name'] . '</span>添加了<span class="redBigFonts">' . $addNum . '</span>个权限，同时收回了<span class="redBigFonts">' . $deleteNum . '</span>个权限';
            } else {
                $tips = '啥都没改，权限没任何变化';
            }
            return json(['code' => 200, 'tips' => $tips]);
        }
    }
}